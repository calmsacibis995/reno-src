.\"	@(#)printf.3	6.7 (Berkeley) 4/14/89
.\"
.TH PRINTF 3 "October 22, 1987"
.AT 3
.SH NAME
fprintf, printf, sprintf, vprintf, vfprintf, vsprintf - formatted
output conversion
.SH SYNOPSIS
.B #include <stdio.h>
.PP
.B printf(format
.RB [ ,
arg ] ...
.B )
.br
.B char *format;
.PP
.B fprintf(stream, format
.RB [ ,
arg ] ...
.B )
.br
.SM
.B FILE
.B *stream;
.br
.B char *format;
.PP
.B sprintf(s, format
.RB [ ,
arg ] ...
.B )
.br
.B char *s, *format;
.PP
.B #include <varargs.h>
.br
.B vprintf(format, args)
.br
.B char *format;
.br
.B va_list args;
.PP
.B vfprintf(stream, format, args)
.br
.B FILE *stream;
.br
.B char *format;
.br
.B va_list args;
.PP
.B vsprintf(s, format, args)
.br
.B char *s, *format;
.br
.B va_list args;
.SH DESCRIPTION
.I Printf
and
.I vprintf
place output on the standard output stream
.BR stdout .
.I Fprintf
and
.I vfprintf
place output on the named output
.IR stream .
.I Sprintf
and
.I vsprintf
copy into the string
.IR s ,
followed by the character `\e0'.
.IR Printf ,
.IR fprintf ,
and
.I sprintf
take variadic argument lists directly, while
.IR vprintf ,
.IR vfprintf ,
and
.I vsprintf
use the variable-length argument facilities of
.IR varargs (3)
and hence may be called indirectly (see examples).
.PP
Each function converts, formats, and prints its arguments after the
.I format
under control of the
.I format
argument; each returns the the total number of characters printed (not
including the trailing `\e0' in
.I sprintf
and
.IR vsprintf ).
.I Format
is a character string which contains two types of objects: plain characters,
which are simply copied to the output stream, and conversion specifications,
each of which causes conversion and printing of the next successive
.IR arg .
.PP
Each conversion specification is introduced by the percent character (``%'').
The remainder of the conversion specification includes, in the following
order,
.TP
.B \(bu
Zero or more of the following flags:
.RS
.TP
.B \(bu
a `#' character
specifying that the value should be converted to an ``alternate form''.
For 
.BR c ,
.BR d ,
.BR i ,
.BR n ,
.BR p ,
.BR s ,
and
.BR u ,
conversions, this option has no effect.
For 
.B o
conversions, the precision of the number is increased to force the first
character of the output string to a zero (except if a zero value is printed
with an explicit precision of zero).
For
.B x
and
.B X
conversions, a non-zero result has the string
.B 0x
(or
.B 0X
for
.B X
conversions) prepended to it.
For
.BR e ,
.BR E ,
.BR f ,
.BR g ,
and
.BR G ,
conversions, the result will always contain a decimal point, even if no
digits follow it (normally, a decimal point appears in the results of
those conversions only if a digit follows).
For
.B g
and
.B G
conversions, trailing zeros are not removed from the result as they
would otherwise be.
.TP
.B \(bu
A zero ``0'' character specifying zero padding.
For all conversions except
.BR n ,
the converted value is padded on the left with zeros rather than blanks.
If a precision is given with a numeric conversion (
.BR d ,
.BR i ,
.BR o ,
.BR u ,
.BR i ,
.BR x ,
and
.BR X ),
the ``0'' flag is ignored.
.TP
.B \(bu
A minus sign (``-'') specifying left adjustment of the converted value
in the indicated field.
Except for
.B n
conversions, the converted value is padded on the right with blanks,
rather than on the left with blanks or zeros.
A ``-'' overrides a ``0'' if both are given.
.TP
.B \(bu
A space, specifying that a blank should be left before a positive number
produced by a signed conversion (
.BR d ,
.BR e ,
.BR E ,
.BR f ,
.BR g ,
.BR G ,
or
.BR i ).
.TP
.B \(bu
a `+' character specifying that a sign always be placed before a
number produced by a signed conversion.
A ``+'' overrides a space if both are used.
.RE
.TP
.B \(bu
An optional digit string specifying a field width.
If the converted value has fewer characters than the field width, it will
be padded on the left (or right, if the left-adjustment flag is used) to
make up the field width.
.TP
.B \(bu
An optional precision, in the form of a period (``.'') followed by an
optional digit string.  If the digit string is omitted, the precision
is taken as zero.  This gives the minimum number of digits to appear for
.BR d ,
.BR i ,
.BR o ,
.BR u ,
.BR x ,
and
.B X
conversions, the number of digits to appear after the decimal point for
.BR e ,
.BR E ,
and
.B f
conversions, the maximum number of significant digits for
.B g
and
.B G
conversions, or the maximum number of characters to be printed from a
string for
.B s
conversions.
.TP
.B \(bu
The character
.BR h ,
specifying that a following
.BR d ,
.BR i ,
.BR o ,
.BR u ,
.BR x ,
or
.B X
conversion corresponds to a
.B "short int"
or
.B "unsigned short int"
argument, or that a following
.B n
conversion corresponds to a pointer to a
.B "short int"
argument.
.TP
.B \(bu
the character
.B l
(ell) specifying that a following
.BR d ,
.BR i ,
.BR o ,
.BR u ,
.BR x ,
or
.B X
conversion corresponds to a
.B "long int"
or
.B "unsigned long int"
argument, or that a following
.B n
conversion corresponds to a pointer to a
.B "long int"
argument.
.TP
.B \(bu
The character
.B L
specifying that a following
.BR e ,
.BR E ,
.BR f ,
.BR g ,
or
.B G
conversion corresponds to a
.B "long double"
argument (but note that long double values are not currently supported
by the \s-2VAX\s0 and Tahoe compilers).
.TP
.B \(bu
A character which indicates the type of conversion to be applied.
.PP
A field width or precision may be an asterisk (``*'') instead of a
digit string.
In this case an
.B int
argument supplies the value.
A negative field width is treated as a left adjustment flag followed by a
positive field width; a negative precision is treated as though it were
missing.
.PP
The conversion characters and their meanings are:
.TP
.B diouxX
The
.B int
(or appropriate variant) argument is converted to signed decimal
.RB ( d " and " i ),
unsigned octal
.RB ( o ),
unsigned decimal
.RB ( u ),
or unsigned hexadecimal
.RB ( x " and " X )
notation respectively.  The letters
.B abcdef
are used for
.B x
conversions; the letters
.B ABCDEF
are used for
.B X
conversions.
The precision, if any, gives the minimum number of digits that must
appear; if the converted value requires fewer digits, it is padded on
the left with zeros.
.TP
.B DOU
The
.B "long int"
argument is converted to signed decimal, unsigned octal, or unsigned
decimal, as if the format had been
.BR ld ,
.BR lo ,
or
.B lu
respectively.
These conversion characters are deprecated, and will eventually disappear.
.TP 8
.B eE
The
.B double
argument is rounded and converted in the style
`[\fB\-\fR]d\fB.\fRddd\fBe\fR\(+-dd' where there is one digit before the
decimal point and the number after is equal to the precision specification
for the argument.
If the precision is missing, 6 digits are given; if the precision is
explicitly zero, no decimal point appears.
An
.B E
conversion uses the letter
.B E
(rather than
.BR e )
to introduce the exponent.
The exponent always contains at least two digits; if the value is zero,
the exponent is 00.
.TP 8
.B f
The
.B double
argument is rounded and converted to decimal notation in the style
`[\fB\-\fR]ddd.ddd' where the number of digits after the decimal point
is equal to the precision.
If the precision is missing, 6 digits are given; if the precision is
explicitly 0, no digits and no decimal point are printed.
If a decimal point appears, at least one digit appears before it.
.TP 8
.B g
The
.B double
argument is printed in style
.B f
or
.B e
(or
.B E
for
.B G
conversions).
The precision specifies the number of significant digits.
If the precision is missing, 6 digits are given; if the precision is zero,
it is treated as 1.
Style
.B e
is used if the exponent from its conversion is less than -4 or greater than
or equal to the precision.
Trailing zeros are removed from the fractional part of the result; a
decimal point appears only if it is followed by at least one digit.
.TP 8
.B c
The
.B int
argument is converted to an
.B "unsigned char",
and the resulting character is printed.
.TP 8
.B s
The
.B "char *"
argument is taken to be a string (character pointer).
Characters from the string are printed until a null character is reached,
or until the number of characters indicated by the precision have been
printed, whichever occurs first; if a precision is given, no null character
need be present.
.TP 8
.B p
The
.B "void *"
pointer argument is printed in hexadecimal (as if by ``%x'' or ``%lx'').
.TP 8
.B n
The number of characters written so far is stored into the
integer indicated by the
.B "int *"
(or variant) pointer argument.
No argument is converted.
.TP 8
.B %
Prints a `%'; no argument is converted.
.PP
In no case does a non-existent or small field width cause truncation of
a field; if the result of a conversion is wider than the field width, the
field is expanded to contain it.
Similarly, padding takes place only if the specified field width exceeds
the actual width.
.PP
.SH EXAMPLES
.br
To print a date and time in the form `Sunday, July 3, 10:02',
where
.I weekday
and
.I month
are pointers to null-terminated strings:
.RS
.HP
.nh
printf("%s, %s %d, %02d:%.2d", weekday, month, day, hour, min);
.RE
.hy
.PP
To print
.if n pi
.if t \(*p
to 5 decimals:
.IP
printf("pi = %.5f", 4*atan(1.0));
.PP
To allocate a 128 byte string and print into it:
.RS
.nf
.ta 1i 2i
.sp
#include <stdio.h>
#include <varargs.h>
char *newfmt(va_alist)
	va_dcl
{
	char *p, *malloc(), fmt;
	va_list ap;
	if ((p = malloc(128)) == NULL)
		return (NULL);
	va_start(ap);
	fmt = va_arg(ap, char *);
	(void) vsprintf(p, fmt, ap);
	va_end(ap);
	return (p);
}
.RE
.fi
.SH "SEE ALSO"
putc(3), scanf(3)
.SH BUGS
The conversion formats ``%D'', ``%O'', and ``%U'' are not standard and
are provided only for backward compatibility.
The effect of padding the ``%p'' format with zeros (either by the ``0''
flag or by specifying a precision), and the benign effect (i.e., none)
of the ``#'' flag on ``%n'' and ``%p'' conversions, as well as other
nonsensical combinations such as ``%Ld'', are not standard; such combinations
should be avoided.
