.\" Copyright (c) 1980, 1989 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms are permitted provided
.\" that: (1) source distributions retain this entire copyright notice and
.\" comment, and (2) distributions including binaries display the following
.\" acknowledgement:  ``This product includes software developed by the
.\" University of California, Berkeley and its contributors'' in the
.\" documentation or other materials provided with the distribution and in
.\" all advertising materials mentioning features or use of this software.
.\" Neither the name of the University nor the names of its contributors may
.\" be used to endorse or promote products derived from this software without
.\" specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED
.\" WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
.\"
.\"	@(#)fstab.5	6.4 (Berkeley) 6/23/90
.\"
.TH FSTAB 5  "June 23, 1990"
.UC 4
.SH NAME
fstab \- static information about the filesystems
.SH SYNOPSIS
.B #include <fstab.h>
.SH DESCRIPTION
The file
.I /etc/fstab
contains descriptive information about the various file
systems.
.I /etc/fstab
is only read by programs, and not written;
it is the duty of the system administrator to properly create 
and maintain this file.
Each filesystem is described on a separate line;
fields on each line are separated by tabs or spaces.
The order of records in
.I /etc/fstab
is important because
.I fsck,
.I mount,
and
.I umount
sequentially iterate through
.I /etc/fstab
doing their thing.
.PP
The first field, (\c
.IR \|fs_spec ),
describes the block special device or
remote filesystem to be mounted.
For filesystems of type
.BR ufs ,
the special file name is the block special file name, 
and not the character special file name.
If a program needs the character special file name,
the program must create it by appending a ``r'' after the
last ``/'' in the special file name.
.PP
The second field, (\c
.IR \|fs_file ),
describes the mount point for the filesystem.
For swap partitions, this field should be specified as ``none''.
.PP
The third field, (\c
.IR \|fs_vfstype ),
describes the type of the filesystem.
The system currently supports four types of filesystems:
.IP \fBufs\fR 8
a local UNIX filesystem
.IP \fBmfs\fR 8
a local memory-based UNIX filesystem
.IP \fBnfs\fR 8
a Sun Microsystems compatible ``Network File System''
.IP \fBswap\fR 8
a disk partition to be used for swapping
.PP
The fourth field, (\c
.IR \|fs_mntops ),
describes the mount options associated with the filesystem.
It is formatted as a comma separated list of options.
It contains at least the type of mount (see
.I fs_type
below) plus any additional options
appropriate to the filesystem type.
.PP
If the options ``userquota'' and/or ``groupquota'' are specified,
the filesystem is automatically processed by the
.IR quotacheck (8)
command, and user and/or group disk quotas are enabled with
.IR quotaon (8).
By default,
filesystem quotas are maintained in files named
.I quota.user
and
.I quota.group
which are located at the root of the associated filesystem.
These defaults may be overridden by putting an equal sign
and an alternative absolute pathname following the quota option.
Thus, if the user quota file for /tmp is stored in /var/quotas/tmp.user,
this location can be specified as:
.IP
	userquota=/var/quotas/tmp.user
.PP
The type of the mount is extracted from the
.I fs_mntops
field and stored separately in the
.I fs_type
field (it is not deleted from the
.I fs_mntops
field).
If
.I fs_type
is ``rw'' or ``ro'' then the filesystem whose name is given in the
.I fs_file
field is normally mounted read-write or read-only on the
specified special file.
If
.I fs_type
is ``sw'' then the special file is made available as a piece of swap
space by the
.IR swapon (8)
command at the end of the system reboot procedure.
The fields other than
.I fs_spec
and
.I fs_type
are unused.
If
.I fs_type
is specified as ``xx'' the entry is ignored.
This is useful to show disk partitions which are currently unused.
.PP
The fifth field, (\c
.IR \|fs_freq ),
is used for these filesystems by the
.IR dump (8)
command to determine which filesystems need to be dumped.
If the fifth field is not present, a value of zero is returned and
.I dump
will assume that the filesystem does not need to be dumped.
.PP
The sixth field, (\c
.IR \|fs_passno ),
is used by the
.IR fsck (8)
program to determine the order in which filesystem checks are done
at reboot time.
The root filesystem should be specified with a
.I fs_passno
of 1, and other filesystems should have a 
.I fs_passno
of 2.
Filesystems within a drive will be checked sequentially,
but filesystems on different drives will be checked at the
same time to utilize parallelism available in the hardware.
If the sixth field is not present or zero,
a value of zero is returned and
.I fsck
will assume that the filesystem does not need to be checked.
.sp 1
.nf
.DT
#define	FSTAB_RW	"rw"	/* read-write device */
#define	FSTAB_RO	"ro"	/* read-only device */
#define	FSTAB_SW	"sw"	/* swap device */
#define	FSTAB_XX	"xx"	/* ignore totally */
.PP
.ta \w'#define 'u +\w'char\ \ 'u +\w'*fs_vfstype;\ \ 'u
struct fstab {
	char	*fs_spec;	/* block special device name */
	char	*fs_file;	/* filesystem path prefix */
	char	*fs_vfstype;	/* type of filesystem */
	char	*fs_mntops;	/* comma separated mount options */
	char	*fs_type;	/* rw, ro, sw, or xx */
	int	fs_freq;	/* dump frequency, in days */
	int	fs_passno;	/* pass number on parallel dump */
};
.fi
.PP
The proper way to read records from
.I /etc/fstab
is to use the routines getfsent(), getfsspec(), getfstype(),
and getfsfile().
.SH FILES
/etc/fstab
.SH SEE ALSO
getfsent(3)
