.\" Copyright (c) 1990 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
.\"
.\"	@(#)crash.8	5.1 (Berkeley) 6/29/90
.\"
.TH CRASH 8 "June 29, 1990"
.UC 7
.SH NAME
crash \- what happens when the system crashes
.SH DESCRIPTION
This section explains what happens when the system crashes
and (very briefly) how to analyze crash dumps.
.PP
When the system crashes voluntarily it prints a message of the form
.IP
panic: why i gave up the ghost
.LP
on the console, takes a dump on a mass storage peripheral,
and then invokes an automatic reboot procedure as
described in
.IR reboot (8).
Unless some unexpected inconsistency is encountered in the state
of the file systems due to hardware or software failure, the system
will then resume multi-user operations.
.PP
The system has a large number of internal consistency checks; if one
of these fails, then it will panic with a very short message indicating
which one failed.
In many instances, this will be the name of the routine which detected
the error, or a two-word description of the inconsistency.
A full understanding of most panic messages requires perusal of the
source code for the system.
.PP
The most common cause of system failures is hardware failure, which
can reflect itself in different ways.  Here are the messages which
are most likely, with some hints as to causes.
Left unstated in all cases is the possibility that hardware or software
error produced the message in some unexpected way.
.TP
.B iinit
This cryptic panic message results from a failure to mount the root filesystem
during the bootstrap process.
Either the root filesystem has been corrupted,
or the system is attempting to use the wrong device as root filesystem.
Usually, an alternate copy of the system binary or an alternate root
filesystem can be used to bring up the system to investigate.
.TP
.B Can't exec /etc/init
This is not a panic message, as reboots are likely to be futile.
Late in the bootstrap procedure, the system was unable to locate
and execute the initialization process,
.IR init (8).
The root filesystem is incorrect or has been corrupted, or the mode
or type of /etc/init forbids execution.
.TP
.B IO err in push
.ns
.TP
.B hard IO err in swap
The system encountered an error trying to write to the paging device
or an error in reading critical information from a disk drive.
The offending disk should be fixed if it is broken or unreliable.
.TP
.B realloccg: bad optim
.ns
.TP
.B ialloc: dup alloc
.ns
.TP
.B alloccgblk: cyl groups corrupted
.ns
.TP
.B ialloccg: map corrupted
.ns
.TP
.B free: freeing free block
.ns
.TP
.B free: freeing free frag
.ns
.TP
.B ifree: freeing free inode
.ns
.TP
.B alloccg: map corrupted
These panic messages are among those that may be produced
when filesystem inconsistencies are detected.
The problem generally results from a failure to repair damaged filesystems
after a crash, hardware failures, or other condition that should not
normally occur.
A filesystem check will normally correct the problem.
.TP
.B timeout table overflow
.ns
This really shouldn't be a panic, but until the data structure
involved is made to be extensible, running out of entries causes a crash.
If this happens, make the timeout table bigger.
.TP
.B "trap type %d, code = %x, v = %x"
An unexpected trap has occurred within the system; the trap types are:
.sp
.nf
0	bus error
1	address error
2	illegal instruction
3	divide by zero
4	\fIchk\fP instruction
5	\fItrapv\fP instruction
6	privileged instruction
7	trace trap
8	MMU fault
9	simulated software interrupt
10	format error
11	FP coprocessor fault
12	coprocessor fault
13	simulated AST
.fi
.sp
The favorite trap type in system crashes is trap type 8,
indicating a wild reference.
``code'' (hex) is the concatenation of the MMU status register
(see <hp300/cpu.h>)
in the high 16 bits and the 68020 special status word
(see the 68020 manual, page 6-17)
in the low 16.
``v'' (hex) is the virtual address which caused the fault.
Additionally, the kernel will dump about a screenful of semi-useful
information.
``pid'' (decimal) is the process id of the process running at the
time of the exception.
Note that if we panic in an interrupt routine,
this process may not be related to the panic.
``ps'' (hex) is the 68020 processor status register ``ps''.
``pc'' (hex) is the value of the program counter saved
on the hardware exception frame.
It may
.I not
be the PC of the instruction causing the fault.
``sfc'' and ``dfc'' (hex) are the 68020 source/destination function codes.
They should always be one.
``p0'' and ``p1'' are the VAX-like region registers.
They are of the form:
.sp
	<length> '@' <kernel VA>
.sp
where both are in hex.
Following these values are a dump of the processor registers (hex).
Finally, is a dump of the stack (user/kernel) at the time of the offense.
.TP
.B init died
The system initialization process has exited.  This is bad news, as no new
users will then be able to log in.  Rebooting is the only fix, so the
system just does it right away.
.TP
.B out of mbufs: map full
The network has exhausted its private page map for network buffers.
This usually indicates that buffers are being lost, and rather than
allow the system to slowly degrade, it reboots immediately.
The map may be made larger if necessary.
.PP
That completes the list of panic types you are likely to see.
.PP
When the system crashes it writes (or at least attempts to write)
an image of memory into the back end of the dump device,
usually the same as the primary swap
area.  After the system is rebooted, the program
.IR savecore (8)
runs and preserves a copy of this core image and the current
system in a specified directory for later perusal.  See
.IR savecore (8)
for details.
.PP
To analyze a dump you should begin by running
.IR adb (1)
with the 
.B \-k
flag on the system load image and core dump.
If the core image is the result of a panic,
the panic message is printed.
Normally the command
``$c''
will provide a stack trace from the point of
the crash and this will provide a clue as to
what went wrong.
A more complete discussion
of system debugging is impossible here.
See, however,
``Using ADB to Debug the UNIX Kernel''.
.SH "SEE ALSO"
adb(1),
reboot(8)
.br
.I "MC68020 32-bit Microprocessor User's Manual"
.br
.I "Using ADB to Debug the UNIX Kernel"
.br
.I "4.3BSD for the HP300"
