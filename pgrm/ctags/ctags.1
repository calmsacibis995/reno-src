.\" Copyright (c) 1987, 1990 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms are permitted provided
.\" that: (1) source distributions retain this entire copyright notice and
.\" comment, and (2) distributions including binaries display the following
.\" acknowledgement:  ``This product includes software developed by the
.\" University of California, Berkeley and its contributors'' in the
.\" documentation or other materials provided with the distribution and in
.\" all advertising materials mentioning features or use of this software.
.\" Neither the name of the University nor the names of its contributors may
.\" be used to endorse or promote products derived from this software without
.\" specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED
.\" WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
.\"
.\"     @(#)ctags.1	6.7 (Berkeley) 7/24/90
.\"
.Dd July 24, 1990
.Dt CTAGS 1
.Os BSD 4
.Sh NAME
.Nm ctags
.Nd create a tags file
.Sh SYNOPSIS
.Nm ctags
.Op Fl BFadtuwvx
.Op Fl f Ar tagsfile
.Ar name ...
.Sh DESCRIPTION
.Nm Ctags
makes a tags file for
.Xr ex 1
from the specified C,
Pascal, Fortran, YACC, lex, and lisp sources.  A tags file gives the
locations of specified objects in a group of files.  Each line of the
tags file contains the object name, the file in which it is defined,
and a search pattern for the object definition, separated by white-space.
Using the
.Ar tags
file,
.Xr ex 1
can quickly locate these object
definitions.  Depending on the options provided to
.Nm ctags ,
objects will consist of subroutines, typedefs, defines, structs,
enums and unions.
.Pp
.Tw Ds
.Tp Fl x
.Nm ctags
produces a list of object
names, the line number and file name on which each is defined, as well
as the text of that line and prints this on the standard output.  This
is a simple index which can be printed out as an off-line readable
function index.
.Pp
.Tp Fl v
An index of the form expected by
.Xr vgrind 1
is produced on the standard output.  This listing
contains the object name, file name, and page number (assuming 64
line pages).  Since the output will be sorted into lexicographic order,
it may be desired to run the output through
.Xr sort 1 .
Sample use:
.Pp
.Ds I
ctags \-v files \&| sort \-f > index
vgrind \-x index
.De
.Tp Fl f
Places the tag descriptions in a file called
.Ar tagsfile .
The default behaviour is to place them in a file
.Ar tags .
.Tp Fl F
use forward searching patterns (/.../) (the default).
.Tp Fl B
use backward searching patterns (?...?).
.Tp Fl a
append to
.Ar tags
file.
.Tp Fl d
create tags for
.Li #defines
that don't take arguments;
.Li #defines
that take arguments are tagged automatically.
.Tp Fl t
create tags for typedefs, structs, unions, and enums.
.Tp Fl w
suppress warning diagnostics.
.Tp Fl u
update the specified files in the
.Ar tags
file, that is, all
references to them are deleted, and the new values are appended to the
file.  (Beware: this option is implemented in a way which is rather
slow; it is usually faster to simply rebuild the
.Ar tags
file.)
.Tp
.Pp
Files whose names end in
.Nm \&.c
or
.Nm \&.h
are assumed to be C
source files and are searched for C style routine and macro definitions.
Files whose names end in
.Nm \&.y
are assumed to be YACC source files.
Files whose names end in
.Nm \&.l
are assumed to be lisp files if their
first non-blank character is `;', `(', or `[',
otherwise, they are
treated as lex files.  Other files are first examined to see if they
contain any Pascal or Fortran routine definitions, and, if not, are
searched for C style definitions.
.Pp
The tag
.Li main
is treated specially in C programs.  The tag formed
is created by prepending
.Ar M
to the name of the file, with the
trailing
.Nm \&.c
and any leading pathname components removed.  This
makes use of
.Nm ctags
practical in directories with more than one
program.
.Pp
Yacc and lex files each have a special tag.
.Ar Yyparse
is the start
of the second section of the yacc file, and
.Ar yylex
is the start of
the second section of the lex file.
.Sh FILES
.Dw tags
.Di L
.Dp Pa tags
default output tags file
.Dp
.Sh DIAGNOSTICS
.Nm Ctags
exits with a value of 1 if an error occurred, where
duplicate objects are not considered errors, 0 otherwise.
.Sh SEE ALSO
.Xr ex 1 ,
.Xr vi 1
.Sh HISTORY
.Nm
appeared in 3 BSD.
.Sh AUTHOR
Ken Arnold; FORTRAN added by Jim Kleckner; Bill Joy added Pascal and
.Fl x ,
replacing
.Ar cxref  ;
C typedefs added by Ed Pelegri-Llopart.
.Sh BUGS
Recognition of
.Nm functions  ,
.Nm subroutines
and
.Nm procedures
for FORTRAN and Pascal is done is a very simpleminded way.  No attempt
is made to deal with block structure; if you have two Pascal procedures
in different blocks with the same name you lose.
.Nm Ctags
doesn't
understand about Pascal types.
.Pp
The method of deciding whether to look for C, Pascal or FORTRAN
functions is a hack.
.Pp
.Nm Ctags
relies on the input being well formed, and any syntactical
errors will completely confuse it.  It also finds some legal syntax
confusing; for example, as it doesn't understand
.Sf Li #ifdef 's,
(incidentally, that's a feature, not a bug) any code with unbalanced
braces inside
.Sf Li #ifdef 's
will cause it to become somewhat disoriented.
In a similar fashion, multiple line changes within a definition will
cause it to enter the last line of the object, rather than the first, as
the searching pattern.  The last line of multiple line
.Sf Li typedef 's
will similarly be noted.
