DBX(1)                      UNIX Reference Manual                       DBX(1)

NNAAMMEE
     ddbbxx - debugger

SSYYNNOOPPSSIISS
     DDbbxx [--rr] [--ii] [--kk] [--II _d_i_r] [--cc _f_i_l_e] [_o_b_j_f_i_l_e [_c_o_r_e_d_u_m_p]]

DDEESSCCRRIIPPTTIIOONN
     DDbbxx is a tool for source level debugging and execution of programs under
     UNIX.  The _o_b_j_f_i_l_e is an object file produced by a compiler with the ap-
     propriate flag (usually --gg) specified to produce symbol information in
     the object file.  Currently, cc(1), f77(1), pc(1), and the DEC Western
     Research Laboratory Modula-2 compiler, mod(l), produce the appropriate
     source information.  The machine level facilities of ddbbxx can be used on
     any program.

     The object file contains a symbol table that includes the names of all
     the source files translated by the compiler to create it.  These files
     are available for perusal while using the debugger.

     If a file named _c_o_r_e exists in the current directory or a _c_o_r_e_d_u_m_p file
     is specified, ddbbxx can be used to examine the state of the program when it
     faulted.

     If the file ._d_b_x_i_n_i_t exists in the current directory then the debugger
     commands in it are executed.  DDbbxx also checks for a ._d_b_x_i_n_i_t in the
     user's home directory if there isn't one in the current directory.

     The command line options and their meanings are:

     --rr        Execute _o_b_j_f_i_l_e immediately.  If it terminates successfully ddbbxx
               exits.  Otherwise the reason for termination will be reported
               and the user offered the option of entering the debugger or
               letting the program fault.  DDbbxx will read from /_d_e_v/_t_t_y when --rr
               is specified and standard input is not a terminal.

     --ii        Force ddbbxx to act as though standard input is a terminal.

     --kk        Map memory addresses, useful for kernel debugging.

     --II _d_i_r    Add _d_i_r to the list of directories that are searched when look-
               ing for a source file.  Normally ddbbxx looks for source files in
               the current directory and in the directory where _o_b_j_f_i_l_e is lo-
               cated.  The directory search path can also be set with the uussee
               command.

     --cc _f_i_l_e   Execute the ddbbxx commands in the _f_i_l_e before reading from stan-
               dard input.

     Unless --rr is specified, ddbbxx just prompts and waits for a command.

  EExxeeccuuttiioonn aanndd TTrraacciinngg CCoommmmaannddss

     rruunn [_a_r_g_s] [<< _f_i_l_e_n_a_m_e] [>> _f_i_l_e_n_a_m_e]
     rreerruunn [_a_r_g_s] [<< _f_i_l_e_n_a_m_e] [>> _f_i_l_e_n_a_m_e]
               Start executing _o_b_j_f_i_l_e, passing _a_r_g_s as command line argu-
               ments; << or >> can be used to redirect input or output in the
               usual manner.  When rreerruunn is used without any arguments the
               previous argument list is passed to the program; otherwise it
               is identical to rruunn.  If _o_b_j_f_i_l_e has been written since the
               last time the symbolic information was read in, ddbbxx will read
               in the new information.
     ttrraaccee [iinn _p_r_o_c_e_d_u_r_e/_f_u_n_c_t_i_o_n] [iiff _c_o_n_d_i_t_i_o_n]
     ttrraaccee _s_o_u_r_c_e-_l_i_n_e-_n_u_m_b_e_r [iiff _c_o_n_d_i_t_i_o_n]
     ttrraaccee _p_r_o_c_e_d_u_r_e/_f_u_n_c_t_i_o_n [iinn _p_r_o_c_e_d_u_r_e/_f_u_n_c_t_i_o_n] [iiff _c_o_n_d_i_t_i_o_n]
     ttrraaccee _e_x_p_r_e_s_s_i_o_n aatt _s_o_u_r_c_e-_l_i_n_e-_n_u_m_b_e_r [iiff _c_o_n_d_i_t_i_o_n]
     ttrraaccee _v_a_r_i_a_b_l_e [iinn _p_r_o_c_e_d_u_r_e/_f_u_n_c_t_i_o_n] [iiff _c_o_n_d_i_t_i_o_n]
               Have tracing information printed when the program is executed.
               A number is associated with the command that is used to turn
               the tracing off (see the ddeelleettee command).

               The first argument describes what is to be traced.  If it is a
               _s_o_u_r_c_e-_l_i_n_e-_n_u_m_b_e_r, then the line is printed immediately prior
               to being executed.  Source line numbers in a file other than
               the current one must be preceded by the name of the file in
               quotes and a colon, e.g.  "mumble.p":17.

               If the argument is a procedure or function name then every time
               it is called, information is printed telling what routine
               called it, from what source line it was called, and what param-
               eters were passed to it.  In addition, its return is noted, and
               if it's a function then the value it is returning is also
               printed.

               If the argument is an _e_x_p_r_e_s_s_i_o_n with an aatt clause then the
               value of the expression is printed whenever the identified
               source line is reached.

               If the argument is a variable then the name and value of the
               variable is printed whenever it changes.  Execution is substan-
               tially slower during this form of tracing.

               If no argument is specified then all source lines are printed
               before they are executed.  Execution is substantially slower
               during this form of tracing.

               The clause iinn _p_r_o_c_e_d_u_r_e/_f_u_n_c_t_i_o_n restricts tracing information
               to be printed only while executing inside the given procedure
               or function.

               _C_o_n_d_i_t_i_o_n is a boolean expression and is evaluated prior to
               printing the tracing information; if it is false then the in-
               formation is not printed.
     ssttoopp iiff _c_o_n_d_i_t_i_o_n
     ssttoopp aatt _s_o_u_r_c_e-_l_i_n_e-_n_u_m_b_e_r [iiff _c_o_n_d_i_t_i_o_n]
     ssttoopp iinn _s_o_u_r_c_e-_l_i_n_e-_n_u_m_b_e_r [iiff _c_o_n_d_i_t_i_o_n]
     ssttoopp _v_a_r_i_a_b_l_e [iiff _c_o_n_d_i_t_i_o_n]
               Stop execution when the given line is reached, procedure or
               function called, variable changed, or condition true.
     ssttaattuuss [>> _f_i_l_e_n_a_m_e]
               Print out the currently active ttrraaccee and ssttoopp commands.
     ddeelleettee _c_o_m_m_a_n_d-_n_u_m_b_e_r ...
               The traces or stops corresponding to the given numbers are
               removed.  The numbers associated with traces and stops are
               printed by the ssttaattuuss command.
     ccaattcchh _n_u_m_b_e_r
     ccaattcchh _s_i_g_n_a_l-_n_a_m_e
     iiggnnoorree _n_u_m_b_e_r
     iiggnnoorree _s_i_g_n_a_l-_n_a_m_e
               Start or stop trapping a signal before it is sent to the
               program.  This is useful when a program being debugged handles
               signals such as interrupts.  A signal may be specified by
               number or by a name (e.g., SIGINT).  Signal names are case
               insensitive and the ``SIG'' prefix is optional.  By default all
               signals are trapped except SIGCONT, SIGCHILD, SIGALRM and
               SIGKILL.
     ccoonntt _i_n_t_e_g_e_r
     ccoonntt _s_i_g_n_a_l-_n_a_m_e
               Continue execution from where it stopped.  If a signal is
               specified, the process continues as though it received the
               signal.  Otherwise, the process is continued as though it had
               not been stopped.
               Execution cannot be continued if the process has ``finished'',
               that is, called the standard procedure ``exit''.  DDbbxx does not
               allow the process to exit, thereby letting the user to examine
               the program state.
     sstteepp      Execute one source line.
     nneexxtt      Execute up to the next source line.  The difference between
               this and sstteepp is that if the line contains a call to a pro-
               cedure or function the sstteepp command will stop at the beginning
               of that block, while the nneexxtt command will not.
     rreettuurrnn [_p_r_o_c_e_d_u_r_e]
               Continue until a return to _p_r_o_c_e_d_u_r_e is executed, or until the
               current procedure returns if none is specified.
     ccaallll _p_r_o_c_e_d_u_r_e (_p_a_r_a_m_e_t_e_r_s)
               Execute the object code associated with the named procedure or
               function.


  PPrriinnttiinngg VVaarriiaabblleess aanndd EExxpprreessssiioonnss
     Names are resolved first using the static scope of the current function,
     then using the dynamic scope if the name is not defined in the static
     scope.  If static and dynamic searches do not yield a result, an
     arbitrary symbol is chosen and the message ``[using Ar qualified name]''
     is printed.  The name resolution procedure may be overridden by qualify-
     ing an identifier with a block name, e.g., ``module.variable'' For C,
     source files are treated as modules named by the file name without
     ``.c''.

     Expressions are specified with an approximately common subset of C and
     Pascal (or equivalently Modula-2) syntax.  Indirection can be denoted us-
     ing either a prefix ``*'' or a postfix ``^'' and array expressions are
     subscripted by brackets (``[]'').  The field reference operator (``.'')
     can be used with pointers as well as records, making the C operator
     ``->'' unnecessary (although it is supported).

     Types of expressions are checked; the type of an expression may be
     overridden by using ``_t_y_p_e-_n_a_m_e (_e_x_p_r_e_s_s_i_o_n)''.  When there is no
     corresponding named type the special constructs ``&_t_y_p_e-_n_a_m_e'' and
     ``$$_t_a_g-_n_a_m_e'' can be used to represent a pointer to a named type or C
     structure tag.

     aassssiiggnn _v_a_r_i_a_b_l_e==_e_x_p_r_e_s_s_i_o_n
               Assign the value of the expression to the variable.
     dduummpp [_p_r_o_c_e_d_u_r_e] [>> _f_i_l_e_n_a_m_e]
               Print the names and values of variables in the given procedure,
               or the current one if none is specified.  If the procedure
               given is ``.'', then the all active variables are dumped.
     pprriinntt _e_x_p_r_e_s_s_i_o_n [,, _e_x_p_r_e_s_s_i_o_n ...]
               Print out the values of the expressions.
     wwhhaattiiss _n_a_m_e
               Print the declaration of the given name, which may be qualified
               with block names as above.
     wwhhiicchh _i_d_e_n_t_i_f_i_e_r
               Print the full qualification of the given identifer, i.e.  the
               outer blocks that the identifier is associated with.
     uupp [_c_o_u_n_t]
     ddoowwnn [_c_o_u_n_t]
               Move the current function, which is used for resolving names,
               up or down the stack _c_o_u_n_t levels.  The default _c_o_u_n_t is 1.
     wwhheerree     Print out a list of the active procedures and function.
     wwhheerreeiiss _i_d_e_n_t_i_f_i_e_r
               Print the full qualification of all the symbols whose name
               matches the given identifier.  The order in which the symbols
               are printed is not meaningful.


  AAcccceessssiinngg SSoouurrccee FFiilleess

     /_r_e_g_u_l_a_r _e_x_p_r_e_s_s_i_o_n[/]
     ?_r_e_g_u_l_a_r _e_x_p_r_e_s_s_i_o_n[?]
                         Search forward or backward in the current source file
                         for the given pattern.
     eeddiitt [_f_i_l_e_n_a_m_e]
     eeddiitt _p_r_o_c_e_d_u_r_e/_f_u_n_c_t_i_o_n-_n_a_m_e
                         Invoke an editor on _f_i_l_e_n_a_m_e or the current source
                         file if none is specified.  If a _p_r_o_c_e_d_u_r_e or
                         _f_u_n_c_t_i_o_n name is specified, the editor is invoked on
                         the file that contains it.  Which editor is invoked
                         by default depends on the installation.  The default
                         can be overridden by setting the environment variable
                         EDITOR to the name of the desired editor.
     ffiillee [_f_i_l_e_n_a_m_e]     Change the current source file name to _f_i_l_e_n_a_m_e.  If
                         none is specified then the current source file name
                         is printed.
     ffuunncc [_p_r_o_c_e_d_u_r_e/_f_u_n_c_t_i_o_n]
                         Change the current function.  If none is specified
                         then print the current function.  Changing the
                         current function implicitly changes the current
                         source file to the one that contains the function; it
                         also changes the current scope used for name
                         resolution.
     lliisstt [_s_o_u_r_c_e-_l_i_n_e-_n_u_m_b_e_r [,,_s_o_u_r_c_e-_l_i_n_e-_n_u_m_b_e_r]
     lliisstt _p_r_o_c_e_d_u_r_e/_f_u_n_c_t_i_o_n
                         List the lines in the current source file from the
                         first line number to the second inclusive.  If no
                         lines are specified, the next 10 lines are listed.
                         If the name of a procedure or function is given lines
                         _n-_k to _n+_k are listed where _n is the first statement
                         in the procedure or function and _k is small.
     uussee _d_i_r_e_c_t_o_r_y-_l_i_s_t
                         Set the list of directories to be searched when
                         looking for source files.


  CCoommmmaanndd AAlliiaasseess aanndd VVaarriiaabblleess

     aalliiaass _n_a_m_e _n_a_m_e
     aalliiaass _n_a_m_e _s_t_r_i_n_g
     aalliiaass _n_a_m_e (_p_a_r_a_m_e_t_e_r_s) ``_s_t_r_i_n_g''
               When commands are processed, dbx first checks to see if the
               word is an alias for either a command or a string.  If it is an
               alias, then dbx treats the input as though the corresponding
               string (with values substituted for any parameters) had been
               entered.  For example, to define an alias ``rr'' for the
               command ``rerun'', one can say

                     alias rr rerun

               To define an alias called ``b'' that sets a stop at a
               particular line one can say

                     alias b(x) ``stop at x''

               Subsequently, the command ``b(12)'' will expand to ``stop at
               12''.

     sseett _n_a_m_e[_e_x_p_r_e_s_s_i_o_n]
               The sseett command defines values for debugger variables.  The
               names of these variables cannot conflict with names in the pro-
               gram being debugged, and are expanded to the corresponding ex-
               pression within other commands.  The following variables have a
               special meaning:

               $frame
                     Setting this variable to an address causes dbx to use the
                     stack frame pointed to by the address for doing stack
                     traces and accessing local variables.  This facility is
                     of particular use for kernel debugging.
               $hexchars
               $hexints
               $hexoffsets
               $hexstrings
                     When set, dbx prints out out characters, integers,
                     offsets from registers, or character pointers respective-
                     ly in hexadecimal.
               $listwindow
                     The value of this variable specifies the number of lines
                     to list around a function or when the lliisstt command is
                     given without any parameters.  Its default value is 10.
               $mapaddrs
                     Setting (unsetting) this variable causes dbx to start
                     (stop) mapping addresses.  As with ``$frame'', this is
                     useful for kernel debugging.
               $unsafecall
               $unsafeassign
                     When ``$unsafecall'' is set, strict type checking is
                     turned off for arguments to subroutine or function calls
                     ( _e ._g.  in the ccaallll statement).  When ``$unsafeassign''
                     is set, strict type checking between the two sides of an
                     aassssiiggnn statement is turned off.  These variables should
                     be used only with great care, because they severely limit
                     dbx's usefulness for detecting errors.

     uunnaalliiaass _n_a_m_e
               Remove the alias with the given name.
     uunnsseett _n_a_m_e
               Delete the debugger variable associated with _n_a_m_e.


  MMaacchhiinnee LLeevveell CCoommmmaannddss

     ttrraacceeii [_a_d_d_r_e_s_s] [_c_o_n_d]
     ttrraacceeii [_v_a_r_i_a_b_l_e] [aatt_a_d_d_r_e_s_s] [iiff_c_o_n_d]
     ssttooppii [_a_d_d_r_e_s_s] [iiff_c_o_n_d]
     ssttooppii [aatt] [_a_d_d_r_e_s_s] [iiff_c_o_n_d]
               Turn on tracing or set a stop using a machine instruction
               address.
     sstteeppii
     nneexxttii     Single step as in sstteepp or nneexxtt, but do a single instruction
               rather than source line.
     _a_d_d_r_e_s_s,_a_d_d_r_e_s_s/[_m_o_d_e]
     _a_d_d_r_e_s_s/[_c_o_u_n_t][_m_o_d_e]
               Print the contents of memory starting at the first _a_d_d_r_e_s_s and
               continuing up to the second _a_d_d_r_e_s_s or until _c_o_u_n_t items are
               printed.  If the address is ``.'', the address following the
               one printed most recently is used.  The _m_o_d_e specifies how
               memory is to be printed; if it is omitted the previous mode
               specified is used.  The initial mode is ``X''.  The following
               modes are supported:

                     ii         print the machine instruction
                     dd         print a short word in decimal
                     DD         print a long word in decimal
                     oo         print a short word in octal
                     OO         print a long word in octal
                     xx         print a short word in hexadecimal
                     XX         print a long word in hexadecimal
                     bb         print a byte in octal
                     cc         print a byte as a character
                     ss         print a string of characters terminated by a
                               null byte
                     ff         print a single precision real number
                     gg         print a double precision real number


               Symbolic addresses are specified by preceding the name with an
               ``&''.  Registers are denoted by ``$rN'' where N is the number
               of the register.  Addresses may be expressions made up of other
               addresses and the operators ``+'', ``-'', and indirection
               (unary ``*'').


  MMiisscceellllaanneeoouuss CCoommmmaannddss

     ggrriippee     Invoke a mail program to send a message to the person in charge
               of ddbbxx.

     hheellpp      Print out a synopsis of ddbbxx commands.

     qquuiitt      Exit ddbbxx.

     sshh _c_o_m_m_a_n_d-_l_i_n_e
               Pass the command line to the shell for execution.  The SHELL
               environment variable determines which shell is used.

     ssoouurrccee _f_i_l_e_n_a_m_e
               Read ddbbxx commands from the given _f_i_l_e_n_a_m_e.

EENNVVIIRROONNMMEENNTT
     DDbbxx utilizes the following environment variables:
           EDITOR
           HOME
           PATH
           SHELL

FFIILLEESS
     _a._o_u_t      object file
     ._d_b_x_i_n_i_t   initial commands


SSEEEE AALLSSOO
     cc(1), mod(l), f77(1), pc(1)

HHIISSTTOORRYY
     DDbbxx appeared in 4.2 BSD.

BBUUGGSS
     DDbbxx suffers from the same ``multiple include'' malady as did ssddbb.  If you
     have a program consisting of a number of object files and each is built
     from source files that include header files, the symbolic information for
     the header files is replicated in each object file.  Since about one de-
     bugger start-up is done for each link, having the linker ld(1) re-
     organize the symbol information would not save much time, though it would
     reduce some of the disk space used.

     This problem is an artifact of the unrestricted semantics of #include's
     in C; for example an include file can contain static declarations that
     are separate entities for each file in which they are included.  However,
     even with Modula-2 there is a substantial amount of duplication of symbol
     information necessary for inter-module type checking.

     Some problems remain with the support for individual languages.  Fortran
     problems include: inability to assign to logical, logical*2, complex and
     double complex variables; inability to represent parameter constants
     which are not type integer or real; peculiar representation for the
     values of dummy procedures (the value shown for a dummy procedure is ac-
     tually the first few bytes of the procedure text; to find the location of
     the procedure, use ``&'' to take the address of the variable).
